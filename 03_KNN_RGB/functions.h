#include <cmath>

// Массив наименований известных цветов.
const char* colors[] = {"Red","Orange","Yellow","Green","Blue","Purple","White","Black"};
// Количество известных цветов.
const int numColors = sizeof(colors) / sizeof(colors[0]);

// Структура данных для хранения образцов цвета полученных с датчика.
struct Color {
  // Наименование цвета.
  const char* name;
  // Значения компонент цвета.
  float r, g, b, w;
};

// Массив отмасштабированных образцов цвета полученных с датчика.
Color knownColors[] = {
  {"Red", -0.523704921708964, 0.4181485487500775, 0.1591423559070114, 0.05044910195484466},
  {"Red", -0.523704921708964, 0.4181485487500775, 0.1591423559070114, -0.18695843665618864},
  {"Red", -0.523704921708964, 0.28380363348900844, 0.07369679568848182, -0.18695843665618864},
  {"Red", -0.4564554935601403, 0.350976091119543, 0.1591423559070114, 0.05044910195484466},
  {"Red", -0.4564554935601403, 0.48532100638061204, 0.24458791612554096, 0.05044910195484466},
  {"Red", -0.5909543498577875, 0.28380363348900844, -0.011748764530047756, -0.18695843665618864},
  {"Red", -0.523704921708964, 0.350976091119543, 0.1591423559070114, 0.05044910195484466},
  {"Red", -0.5909543498577875, 0.28380363348900844, -0.011748764530047756, -0.18695843665618864},
  {"Red", -0.523704921708964, 0.350976091119543, 0.07369679568848182, -0.18695843665618864},
  {"Red", -0.523704921708964, 0.350976091119543, 0.1591423559070114, 0.05044910195484466},
  {"Orange", -0.6582037780066111, -0.38792094281633677, -0.09719432474857732, -0.4243659752672219},
  {"Orange", -0.7254532061554347, -0.4550934004468713, -0.1826398849671069, -0.4243659752672219},
  {"Orange", -0.6582037780066111, -0.4550934004468713, -0.1826398849671069, -0.4243659752672219},
  {"Orange", -0.523704921708964, -0.4550934004468713, -0.1826398849671069, -0.4243659752672219},
  {"Orange", -0.6582037780066111, -0.4550934004468713, -0.1826398849671069, -0.4243659752672219},
  {"Orange", -0.7254532061554347, -0.5222658580774058, -0.2680854451856365, -0.6617735138782552},
  {"Orange", -0.6582037780066111, -0.4550934004468713, -0.1826398849671069, -0.4243659752672219},
  {"Orange", -0.6582037780066111, -0.4550934004468713, -0.09719432474857732, -0.4243659752672219},
  {"Orange", -0.6582037780066111, -0.38792094281633677, -0.09719432474857732, -0.4243659752672219},
  {"Orange", -0.6582037780066111, -0.38792094281633677, -0.09719432474857732, -0.4243659752672219},
  {"Yellow", -0.6582037780066111, -0.7237832309690094, -0.2680854451856365, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7909556885995439, -0.2680854451856365, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7237832309690094, -0.2680854451856365, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7909556885995439, -0.35353100540416604, -0.6617735138782552},
  {"Yellow", -0.7254532061554347, -0.7909556885995439, -0.2680854451856365, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7909556885995439, -0.2680854451856365, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7237832309690094, -0.35353100540416604, -0.6617735138782552},
  {"Yellow", -0.7254532061554347, -0.7909556885995439, -0.35353100540416604, -0.6617735138782552},
  {"Yellow", -0.7254532061554347, -0.7909556885995439, -0.35353100540416604, -0.6617735138782552},
  {"Yellow", -0.6582037780066111, -0.7237832309690094, -0.2680854451856365, -0.6617735138782552},
  {"Green", -0.05295892466719868, -0.4550934004468713, 0.07369679568848182, -0.18695843665618864},
  {"Green", -0.05295892466719868, -0.4550934004468713, -0.011748764530047756, -0.18695843665618864},
  {"Green", 0.01429050348162492, -0.38792094281633677, 0.07369679568848182, 0.05044910195484466},
  {"Green", 0.01429050348162492, -0.38792094281633677, 0.1591423559070114, 0.05044910195484466},
  {"Green", 0.08153993163044852, -0.32074848518580223, 0.1591423559070114, 0.05044910195484466},
  {"Green", 0.08153993163044852, -0.32074848518580223, 0.1591423559070114, 0.05044910195484466},
  {"Green", 0.01429050348162492, -0.38792094281633677, 0.07369679568848182, -0.18695843665618864},
  {"Green", 0.01429050348162492, -0.38792094281633677, 0.1591423559070114, 0.05044910195484466},
  {"Green", -0.05295892466719868, -0.4550934004468713, 0.07369679568848182, -0.18695843665618864},
  {"Green", 0.01429050348162492, -0.38792094281633677, 0.07369679568848182, 0.05044910195484466},
  {"Blue", 0.48503650052339015, -0.4550934004468713, -0.6953132462782843, -0.18695843665618864},
  {"Blue", 0.4177870723745666, -0.38792094281633677, -0.6953132462782843, -0.18695843665618864},
  {"Blue", 0.28328821607691934, -0.4550934004468713, -0.6953132462782843, -0.18695843665618864},
  {"Blue", 0.35053764422574296, -0.4550934004468713, -0.6953132462782843, -0.4243659752672219},
  {"Blue", 0.35053764422574296, -0.4550934004468713, -0.6953132462782843, -0.4243659752672219},
  {"Blue", 0.28328821607691934, -0.5222658580774058, -0.6953132462782843, -0.4243659752672219},
  {"Blue", 0.28328821607691934, -0.4550934004468713, -0.6953132462782843, -0.18695843665618864},
  {"Blue", 0.14878935977927213, -0.5222658580774058, -0.780758806496814, -0.4243659752672219},
  {"Blue", 0.4177870723745666, -0.38792094281633677, -0.6098676860597547, -0.18695843665618864},
  {"Blue", 0.4177870723745666, -0.4550934004468713, -0.6953132462782843, -0.4243659752672219},
  {"Purple", -0.1874577809648459, 0.21663117585847394, -0.4389765656226956, 0.05044910195484466},
  {"Purple", -0.1874577809648459, 0.21663117585847394, -0.4389765656226956, 0.05044910195484466},
  {"Purple", -0.32195663726249313, 0.1494587182279394, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.2547072091136695, 0.21663117585847394, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.1874577809648459, 0.28380363348900844, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.2547072091136695, 0.21663117585847394, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.2547072091136695, 0.1494587182279394, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.3892060654113167, 0.1494587182279394, -0.4389765656226956, -0.18695843665618864},
  {"Purple", -0.1874577809648459, 0.28380363348900844, -0.4389765656226956, 0.05044910195484466},
  {"Purple", -0.1874577809648459, 0.28380363348900844, -0.4389765656226956, 0.05044910195484466},
  {"White", -0.6582037780066111, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"White", -0.6582037780066111, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.122541047370932, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.122541047370932, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.122541047370932, -0.8991810524892886},
  {"White", -0.859952062453082, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"White", -0.6582037780066111, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.122541047370932, -0.8991810524892886},
  {"White", -0.7254532061554347, -0.925300603860613, -1.0370954871524025, -0.8991810524892886},
  {"Black", 2.4352699168392746, 2.1646324471439753, 2.209835801151721, 2.1871169494541443},
  {"Black", 2.569768773136922, 2.433322277666113, 2.46617248180731, 2.4245244880651775},
  {"Black", 2.5025193449880985, 2.433322277666113, 2.46617248180731, 2.6619320266762108},
  {"Black", 2.4352699168392746, 2.3661498200355786, 2.38072692158878, 2.4245244880651775},
  {"Black", 2.704267629434569, 2.634839650557717, 2.637063602244369, 2.6619320266762108},
  {"Black", 2.5025193449880985, 2.5676671929271824, 2.637063602244369, 2.8993395652872445},
  {"Black", 2.569768773136922, 2.500494735296648, 2.551618042025839, 2.6619320266762108},
  {"Black", 2.5025193449880985, 2.500494735296648, 2.551618042025839, 2.4245244880651775},
  {"Black", 2.3007710605416274, 2.298977362405044, 2.38072692158878, 2.4245244880651775},
  {"Black", 2.16627220424398, 2.1646324471439753, 2.209835801151721, 2.4245244880651775}};

// Размер датасета.
const int numKnownColors = sizeof(knownColors) / sizeof(knownColors[0]);


// Массив содержащий стандартное отклонение и среднее значение для каждой компоненты цвета.
Color MeanAndScale[] = {
  {"  MEAN ",  17.7875, 21.775,  19.1375,  5.7875},
  {"  SCALE ",  14.87001492, 14.88705394,  11.70335823,  4.21216616}
};



/** Реализлвана функция для захвата цвета с матрицы датчика. 
  Color DetectedColor[] - Структура данных для хранения образца цвета полученного с датчика.**/
void colorCapture(Color DetectedColor[]){

  // Состояния пинов S2 и S3 определяют, какой набор фотодиодов мы используем: LOW/LOW — для КРАСНОГО.
  digitalWrite(s2, LOW);
  digitalWrite(s3, LOW);
  // Получаем значение для красной компоненты цвета.
  DetectedColor[0].r = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
  delay(20);

  // Меняем состояния пинов S2 и S3 на LOW/HIGH для голубой компоненты цвета.
  digitalWrite(s3, HIGH); 
  // Получаем значение для голубой компоненты цвета.
  DetectedColor[0].b = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
  delay(20);

  // Меняем состояния пинов S2 и S3 на HIGH/HIGH для зелёной компоненты цвета.
  digitalWrite(s2, HIGH);
  // Получаем значение для зелёной компоненты цвета.
  DetectedColor[0].g = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
  delay(20);

  // Меняем состояния пинов S2 и S3 на HIGH/LOW для белой компоненты цвета.
  digitalWrite(s3, LOW);
  // Получаем значение для белой компоненты цвета.
  DetectedColor[0].w = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
  delay(20);
}


/** Реализлвана функция для масштабирования данных полученных с датчика. 
  Color MeanAndScale[] - Массив содержащий стандартное отклонение и среднее значение для каждой компоненты цвета.
  Color DetectedColor[] - Структура содержащая  образец цвета полученный с датчика.
  Color ScaledDetectedColor[] - Структура данных для хранения отмасштабированого образца цвета полученного с датчика.**/
void scaleData(Color MeanAndScale[], Color DetectedColor[], Color ScaledDetectedColor[]){
  // Масштабируем красную компоненту цвета.
  ScaledDetectedColor[0].r = (DetectedColor[0].r - MeanAndScale[0].r) / MeanAndScale[1].r;
  // Масштабируем голубую компоненту цвета.
  ScaledDetectedColor[0].g = (DetectedColor[0].g - MeanAndScale[0].g) / MeanAndScale[1].g;
  // Масштабируем зелёную компоненту цвета.
  ScaledDetectedColor[0].b = (DetectedColor[0].b - MeanAndScale[0].b) / MeanAndScale[1].b;
  // Масштабируем белую компоненту цвета.
  ScaledDetectedColor[0].w = (DetectedColor[0].w - MeanAndScale[0].w) / MeanAndScale[1].w;
}



/** Функция для вычисления евклидова расстояния между двумя цветами (табличным и полученным с датчика):
     - Для каждой компоненты цвета RGB расчитать разницу между известным цветом и полученным с датчика.
     - Разицу для каждой компоненты RGB возвести в квадрат.
     - Посчитать сумму квадратов всех компонент.
     - Получить корень квадратный от суммы квадратов. **/
float colorDifference(float r1, float g1, float b1, float w1, float r2, float g2, float b2, float w2) {
  return sqrt(pow(r1 - r2, 2) + pow(g1 - g2, 2) + pow(b1 - b2, 2) + pow(w1 - w2, 2));
}



/** Структура данных для хранения списка ближайших образцов цвета к полученному с датчика. **/ 
struct dotDistance {
  // Наименование цвета.
  const char* name;
  // Значения компонент цвета.
  float r, g, b, w;
  // Евклидово расстояние между образцом цвета полученным с датчика и табличным образцом.
  float dist;
};



/** Функция сортирует массив структур dotDistance таким образом чтобы наименьшее значение переменной dist было первым, а самое большое последним. 
    dotDistance arr[] - Структура данных хранящая список ближайших образцов цвета к полученному с датчика.
    int K - Кол-во ближайших рассматриваемых образцов цвета к полученному с датчика.**/
void bubbleSortByDist(dotDistance arr[], int K) {
  // Внешний цикл — выполняется (K - 1) раз.
  for (int i = 0; i < K - 1; i++) {
    // Внутренний цикл — сравнивает соседние элементы и переносит наибольший в конец массива.
    for (int j = 0; j < K - i - 1; j++) {
      // Если текущий элемент больше следующего — меняем их местами.
      if (arr[j].dist > arr[j + 1].dist) {
        // Временная переменная для хранения одного из элементов.
        dotDistance temp = arr[j];
        // Перемещаем меньший элемент на место текущего.
        arr[j] = arr[j + 1];
        // Помещаем больший элемент на место следующего.
        arr[j + 1] = temp;
      }
    }
  }
}


/** Функция возвращает массив ближайших цветов.
    int K - Кол-во ближайших рассматриваемых образцов цвета к полученному с датчика.
    dotDistance minDistances [K] - Структура данных хранящая список ближайших образцов цвета к полученному с датчика.
    float r, g, b, w - Значения компонент цвета полученные с датчика.**/ 
void getListOfNearestColors(int K, dotDistance minDistances [], float r, float g, float b, float w) {
  // Структура данных хранящая список ближайших образцов цвета к полученному с датчика.
  //dotDistance minDistances [K];

  // Заполняем массив ближайших образцов цвета большими значениями.
  for (int i = 0; i < K; i++) {
    minDistances [i] = {"Unknown",  1000.0, 1000.0, 1000.0, 1000.0, 1000.0};
  }

  // Проходим по всем известным цветам и находим минимальное расстояние.
  for (int i = 0; i < numKnownColors; i++) {
    // Вычисляем евклидово расстояния между двумя цветами (табличным и полученным с датчика)
    float dist = colorDifference(r, g, b, w, knownColors[i].r, knownColors[i].g, knownColors[i].b, knownColors[i].w);
    // Если евклидово расстояние для текущего цвета наименьшее.
    if (dist < minDistances[K-1].dist) {
      // Обновляем минимльное евклидово расстояние для дальнейшего сравнения.
      minDistances[K-1].dist = dist;
      // Соханяем текущий цвет как ближайший.
      minDistances[K-1].name = knownColors[i].name;
      minDistances[K-1].r = knownColors[i].r;
      minDistances[K-1].g = knownColors[i].g;
      minDistances[K-1].b = knownColors[i].b;
      minDistances[K-1].w = knownColors[i].w;
      // Сортируем массив ближайших образцов цвета таким образом чтобы элемент с наименьшим значением переменной dist был первым, а с самым большим последним. 
      bubbleSortByDist(minDistances, K);
    }
  }
}



/** Функция возвращает наименование цвета захваченого датчиком.
    int K - Кол-во ближайших рассматриваемых образцов цвета к полученному с датчика.
    dotDistance minDistances [K] - Структура данных хранящая список ближайших образцов цвета к полученному с датчика.
    const char* colors[] - Массив наименований известных цветов.
    const int numColors - Количество известных цветов.**/ 
String colorClasify(int K, dotDistance minDistances [], const char* colors[], int numColors){
  // Массив для подсчёта кол-ва повторений известных наименований в списке ближайших образцов цвета.
  int score [numColors];
  for (int o = 0; o < numColors; o++) {
    score [o] = 0;
  }

  // Проходим по массиву известных наименований цветов.
  for (int i = 0; i < numColors; i++) {
    // Проходим по списку ближайших образцов цвета.
    for (int j = 0; j < K; j++) {
      // Если наименования цветов из двух массивов совпадают, то отмечаем повторение.
      if(String(minDistances[j].name) == String(colors[i])){
        score [i] += 1;
      }
    }
  }
  
  // Получим индекс элемента в массиве известных наименований цветов с наибольшим количеством повторений.
  int max = 0;
  for (int g = 1; g < numColors; g++) {
    if(score[max] < score[g]){
      max = g;
    }
  }
  // Вернём наименование цвета с наибольшим количеством повторений в списке ближайших образцов цвета.
  return String(colors[max]);
}




/** Функция возвращает строку на базе которой будет построена таблица на вебстраничке с параметрами захвачеными с датчика, а также предсказанием цвета на базе этих параметров.
  String prediction - предсказание(наименование цвета захваченого датчиком.)
  Color DetectedColor[] - Структура содержащая  образец цвета полученный с датчика.
  Color ScaledDetectedColor[] - Структура данных для хранения отмасштабированого образца цвета полученного с датчика.
  dotDistance minDistances [] - Структура данных для хранения списка ближайших образцов цвета к полученному с датчика.
  int K - Кол-во ближайших рассматриваемых образцов цвета к полученному с датчика.**/
String prepareKNNTable(String prediction, Color DetectedColor[], Color ScaledDetectedColor[], dotDistance minDistances [], int K){
  String data = String("DET_COLOR, DIST, RED, GREEN, BLUE, WHITE \n") +
                  "PRED: " + String(prediction) + ", -, " +
                  String(DetectedColor[0].r) + " / " + String(ScaledDetectedColor[0].r) + ", " +
                  String(DetectedColor[0].g) + " / " + String(ScaledDetectedColor[0].g) + ", " +
                  String(DetectedColor[0].b) + " / " + String(ScaledDetectedColor[0].b) + ", " +
                  String(DetectedColor[0].w) + " / " + String(ScaledDetectedColor[0].w) + "\n";
  for (int i = 0; i < K; i++) {
    data += String(i+1) + ": " + String(minDistances[i].name) + ", " +
            String(minDistances[i].dist) + ", " +
            String(minDistances[i].r) + ", " +
            String(minDistances[i].g) + ", " +
            String(minDistances[i].b) + ", " +
            String(minDistances[i].w) + "\n ";
  }
  return data;
}